import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:timezone/timezone.dart' as tz;

class NotificationService {
  final FlutterLocalNotificationsPlugin _notifications = FlutterLocalNotificationsPlugin();
  bool _isInitialized = false;

  Future<void> initialize() async {
    if (_isInitialized) return;
    
    print('üîî NotificationService: B·∫Øt ƒë·∫ßu kh·ªüi t·∫°o...');
    
    const androidSettings = AndroidInitializationSettings('@mipmap/ic_launcher');
    print('üì± Android settings ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh');
    
    const iosSettings = DarwinInitializationSettings();
    print('üì± iOS settings ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh');

    const settings = InitializationSettings(
      android: androidSettings,
      iOS: iosSettings,
    );

    await _notifications.initialize(settings);
    _isInitialized = true;
    print('‚úÖ NotificationService: Kh·ªüi t·∫°o th√†nh c√¥ng');
  }

  Future<void> showNotification({
    required int id,
    required String title,
    required String body,
    String? payload,
  }) async {
    if (!_isInitialized) {
      print('‚ö†Ô∏è NotificationService ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o');
      await initialize();
    }

    print('üì§ ƒêang g·ª≠i notification:');
    print('- ID: $id');
    print('- Title: $title'); 
    print('- Body: $body');
    print('- Payload: $payload');

    try {
      const androidDetails = AndroidNotificationDetails(
        'default_channel',
        'Default Channel',
        importance: Importance.high,
        priority: Priority.high,
      );
      print('üì± Android details ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh');

      const iosDetails = DarwinNotificationDetails();
      print('üì± iOS details ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh');

      const details = NotificationDetails(
        android: androidDetails,
        iOS: iosDetails,
      );

      await _notifications.show(id, title, body, details, payload: payload);
      print('‚úÖ Notification ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng');
    } catch (e) {
      print('‚ùå L·ªói khi g·ª≠i notification: $e');
    }
  }

  // L√™n l·ªãch notification
  Future<void> scheduleNotification({
    required int id,
    required String title,
    required String body,
    required DateTime scheduledDate,
    String? payload,
  }) async {
    const androidDetails = AndroidNotificationDetails(
      'scheduled_channel',
      'Scheduled Channel',
      importance: Importance.high,
      priority: Priority.high,
    );

    const iosDetails = DarwinNotificationDetails();

    const details = NotificationDetails(
      android: androidDetails,
      iOS: iosDetails,
    );

    await _notifications.zonedSchedule(
      id,
      title,
      body,
      tz.TZDateTime.from(scheduledDate, tz.local),
      details,
      androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,
      uiLocalNotificationDateInterpretation:
          UILocalNotificationDateInterpretation.absoluteTime,
      payload: payload,
    );
  }

  // H·ªßy m·ªôt notification c·ª• th·ªÉ
  Future<void> cancelNotification(int id) async {
    await _notifications.cancel(id);
  }

  // H·ªßy t·∫•t c·∫£ notifications
  Future<void> cancelAllNotifications() async {
    await _notifications.cancelAll();
  }
} 